@using System.ComponentModel.DataAnnotations;
@page "/"
@using ProjectTalon.App.ViewModel
@using ProjectTalon.App.Enums
@using ProjectTalon.Core.Common
@inject IWalletDashboardViewModel ViewModel

@if(ViewModel.WalletSummary is null)
{
    @*Need a Spinner*@
}else
{

<div class="p-5">
    <div class="pb-5">
        <h1>@ViewModel.WalletSummary.Name</h1>
        <Card>
            <div class="d-flex align-items-baseline">
                <h6 class="m-0">Address</h6>
                <p class="pl-3 m-0">@ViewModel.WalletSummary.SingleAddress</p>
            </div>    
        </Card>
    </div>
        
        


    <h2>Connections</h2>

    <div>
        @if (ViewModel.Connections.Any())
        {
            @foreach (var conn in ViewModel.Connections)
            {
                <Card>
                    <div class="row mb-2">
                        <div class="col-6">@conn.Name</div>
                        <div class="col-6">
                            @if ((int)conn.ConnectionStatus > 0)
                            {
                                <Badge Text=@(((ConnectionStatus)conn.ConnectionStatus).ToString()) Theme="@(conn.ConnectionStatus == (int)ConnectionStatus.Approved ? "success" : "danger")" />
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick="() => ViewModel.UpdateConnection(conn.Id, ConnectionStatus.Approved)">Approve</button>
                                <button class="btn btn-danger" @onclick="() => ViewModel.UpdateConnection(conn.Id, ConnectionStatus.Denied)">Deny</button>
                            }
                        </div>
                    </div>
                </Card>
            }
        }
    </div>
</div>

}

@*@if (ViewModel.WalletSummary != null)
{
    <div class="card"> 
        <div class="card-body">
            <h5 class="card-title">
                @ViewModel.WalletSummary.Name
            </h5>
            <div class=" d-flex justify-content-between">
                <div class="h3">
                    @ViewModel.WalletSummary.Amount
                </div>
                <div>
                    <div class="h5">
                        @ViewModel.WalletSummary.AmountInUSD
                    </div>
                    <div>
                        1 ADA = @ViewModel.WalletSummary.CurrencyConversionRate USD
                    </div>
                </div>
            </div>
        </div>
    </div>
}
    
<div class="row pt-3">
    @if(ViewModel.Tokens != null) 
    {
        <div class="col-6">
            <h5>Tokens</h5>
            <div class="card">
                <div class="card-body">
                    <ul class="list-group">
                        @foreach(var token in ViewModel.Tokens)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div>
                                            @token.Name
                                        </div>
                                        <div class="font-size-xs">
                                            @token.Asset
                                        </div>
                                    </div>
                                    <div>
                                        @token.Amount @token.Name
                                    </div>
                                </div>
                            
                            </li>
                        }
                    
                    </ul>
                </div>
            </div>
        </div>
    }
    @if (ViewModel.Transactions != null)
    {
        <div class="col-6">
            <h5>Recent Transactions</h5>
            <div class="card">
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var transaction in ViewModel.Transactions)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <div>
                                            @transaction.Date.ToLongTimeString()
                                        </div>
                                        <div class="font-size-xs">
                                            @Enum.GetName(typeof(TransactionStatus), transaction.TransactionStatus)
                                        </div>
                                    </div>
                                    <div>
                                        @transaction.Amount @transaction.TokenName
                                    </div>
                                    <div>
                                        <Button Text="View Details" />
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <div class="text-center pt-3" @onclick="@(e => ViewModel.GoTo("transactions"))">
                        See More
                    </div>
                </div>
            </div>
        </div>
    }
</div>*@


    

@code {

    protected override async Task OnInitializedAsync()
    {
        if (await ViewModel.GetWalletCount() > 0)
        {
            await ViewModel.FetchDashBoard();
        }else
        {
            ViewModel.GoTo("new-wallet");
        }

        ViewModel.PropertyChanged += (o, e) => StateHasChanged();
    }

}

